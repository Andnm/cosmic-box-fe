import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { motion, AnimatePresence } from 'framer-motion';
import { Star, Archive, Send, Loader, CheckCircle, AlertCircle } from 'lucide-react';
import { lettersAPI } from '../services/api';
import { useNotifications } from '../context/NotificationContext';

const WriteLetter = () => {
  const [letterContent, setLetterContent] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [successMessage, setSuccessMessage] = useState('');
  const { addNotification } = useNotifications();
  const navigate = useNavigate();

  const fadeInUp = {
    initial: { opacity: 0, y: 30 },
    animate: { opacity: 1, y: 0 },
    transition: { duration: 0.5 }
  };

  const clearMessages = () => {
    setError('');
    setSuccessMessage('');
  };

  const handleContentChange = (e) => {
    setLetterContent(e.target.value);
    if (error || successMessage) {
      clearMessages();
    }
  };

  const validateContent = () => {
    if (!letterContent.trim()) {
      setError('Vui l√≤ng nh·∫≠p n·ªôi dung th∆∞');
      return false;
    }
    if (letterContent.trim().length < 10) {
      setError('N·ªôi dung th∆∞ ph·∫£i c√≥ √≠t nh·∫•t 10 k√Ω t·ª±');
      return false;
    }
    if (letterContent.length > 5000) {
      setError('N·ªôi dung th∆∞ kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 5000 k√Ω t·ª±');
      return false;
    }
    return true;
  };

  const handleSendLetter = async () => {
    if (!validateContent()) return;

    setLoading(true);
    clearMessages();

    try {
      const response = await lettersAPI.create(letterContent.trim(), 'sent');
      
      setSuccessMessage('Th∆∞ c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·ªÉ ch·ªù ki·ªÉm duy·ªát!');
      addNotification({
        type: 'success',
        title: 'G·ª≠i th∆∞ th√†nh c√¥ng!',
        content: 'Th∆∞ c·ªßa b·∫°n ƒëang ƒë∆∞·ª£c admin xem x√©t v√† s·∫Ω ƒë∆∞·ª£c g·ª≠i ƒë·∫øn ng∆∞·ªùi kh√°c sau khi ƒë∆∞·ª£c duy·ªát.'
      });

      // Clear form after successful submission
      setTimeout(() => {
        setLetterContent('');
        setSuccessMessage('');
      }, 3000);

    } catch (error) {
      console.error('Send letter error:', error);
      
      let errorMessage = 'C√≥ l·ªói x·∫£y ra khi g·ª≠i th∆∞';
      if (error.response?.data?.error) {
        errorMessage = error.response.data.error;
      } else if (error.response?.data?.details) {
        errorMessage = error.response.data.details[0]?.msg || errorMessage;
      }
      
      setError(errorMessage);
      addNotification({
        type: 'error',
        title: 'G·ª≠i th∆∞ th·∫•t b·∫°i',
        content: errorMessage
      });
    } finally {
      setLoading(false);
    }
  };

  const handleSaveArchive = async () => {
    if (!validateContent()) return;

    setLoading(true);
    clearMessages();

    try {
      const response = await lettersAPI.create(letterContent.trim(), 'archived');
      
      setSuccessMessage('Th∆∞ ƒë√£ ƒë∆∞·ª£c l∆∞u tr·ªØ!');
      addNotification({
        type: 'success',
        title: 'L∆∞u tr·ªØ th∆∞ th√†nh c√¥ng!',
        content: 'B·∫°n c√≥ th·ªÉ xem l·∫°i th∆∞ trong m·ª•c l∆∞u tr·ªØ.'
      });

      // Navigate to archive after saving
      setTimeout(() => {
        navigate('/archive');
      }, 2000);

    } catch (error) {
      console.error('Save draft error:', error);
      
      let errorMessage = 'C√≥ l·ªói x·∫£y ra khi l∆∞u th∆∞';
      if (error.response?.data?.error) {
        errorMessage = error.response.data.error;
      }
      
      setError(errorMessage);
      addNotification({
        type: 'error',
        title: 'L∆∞u th∆∞ th·∫•t b·∫°i',
        content: errorMessage
      });
    } finally {
      setLoading(false);
    }
  };

  const wordCount = letterContent.length;
  const maxLength = 5000;

  return (
    <div className="min-h-screen py-8 px-6">
      <div className="max-w-4xl mx-auto">
        <motion.div 
          className="text-center mb-8"
          {...fadeInUp}
        >
          <div className="flex items-center justify-center mb-6 mt-10">
            <Star className="text-pink-400 mr-3" size={32} />
            <h1 className="text-4xl font-bold text-cosmic-purple pearl-jean-style">NG√ÄY H√îM NAY C·ª¶A B·∫†N TH·∫æ N√ÄO?</h1>
          </div>
          <p className="text-cosmic-purple/80 leading-relaxed max-w-2xl mx-auto">
            Ch√∫ng m√¨nh ·ªü ƒë√¢y ƒë·ªÉ l·∫Øng nghe b·∫°n n√™n ƒë·ª´ng ng·∫ßn ng·∫°i chia s·∫ª v·ªõi ch√∫ng m√¨nh nh√©!
            Bi·∫øt ƒë√¢u c√¢u chuy·ªán c·ªßa b·∫°n l·∫°i ch√≠nh l√† th√¥ng ƒëi·ªáp m√† ng∆∞·ªùi kh√°c ƒëang c·∫ßn ƒë√≥.
          </p>
        </motion.div>

        {/* Messages */}
        <AnimatePresence>
          {error && (
            <motion.div
              className="mb-6 p-4 bg-red-500/20 border border-red-500/30 rounded-2xl text-red-300 flex items-center space-x-3"
              initial={{ opacity: 0, y: -20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              transition={{ duration: 0.3 }}
            >
              <AlertCircle size={20} />
              <span>{error}</span>
            </motion.div>
          )}

          {successMessage && (
            <motion.div
              className="mb-6 p-4 bg-green-500/20 border border-green-500/30 rounded-2xl text-green-300 flex items-center space-x-3"
              initial={{ opacity: 0, y: -20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              transition={{ duration: 0.3 }}
            >
              <CheckCircle size={20} />
              <span>{successMessage}</span>
            </motion.div>
          )}
        </AnimatePresence>

        <motion.div 
          className="relative mb-8"
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ duration: 0.6, delay: 0.2 }}
        >
          <div className="absolute -top-4 -left-4">
            <Star className="text-pink-400" size={24} />
          </div>
          <div className="absolute -top-2 -right-2">
            <div className="w-4 h-4 bg-blue-400 rounded-full opacity-60"></div>
          </div>
          
          <div className="bg-white/20 backdrop-blur-md rounded-3xl p-8 border border-white/30 min-h-[500px] relative">
            <div className="absolute top-4 left-4 text-blue-800 text-sm">
              T√¢m s·ª± t·∫°i ƒë√¢y...
            </div>
            <div className="absolute top-4 right-4 text-cosmic-purple/60 text-sm">
              {wordCount}/{maxLength} k√Ω t·ª±
            </div>
            
            <textarea
              value={letterContent}
              onChange={handleContentChange}
              placeholder=""
              maxLength={maxLength}
              className="w-full h-full min-h-[400px] bg-transparent text-cosmic-purple placeholder-cosmic-purple/50 resize-none outline-none leading-relaxed text-lg pt-8"
              style={{ 
                backgroundImage: 'repeating-linear-gradient(transparent, transparent 24px, rgba(74, 27, 92, 0.1) 24px, rgba(74, 27, 92, 0.1) 25px)',
                lineHeight: '25px'
              }}
              disabled={loading}
            />
          </div>
          
          <div className="absolute -bottom-2 right-4">
            <div className="w-3 h-3 bg-yellow-400 rounded-full opacity-70"></div>
          </div>
        </motion.div>

        <motion.div 
          className="flex flex-col sm:flex-row gap-4 justify-center"
          initial={{ opacity: 0, y: 30 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.4 }}
        >
          <motion.button
            onClick={handleSendLetter}
            disabled={loading || !letterContent.trim()}
            className="bg-blue-500 hover:bg-blue-600 disabled:cursor-not-allowed text-white px-8 py-3 rounded-full font-medium transition-all duration-300 flex items-center justify-center space-x-2"
            whileHover={{ scale: loading ? 1 : 1.05 }}
            whileTap={{ scale: loading ? 1 : 0.95 }}
          >
            {loading ? (
              <>
                <Loader className="animate-spin" size={20} />
                <span>ƒêANG G·ª¨I...</span>
              </>
            ) : (
              <>
                <Send size={20} />
                <span>G·ª¨I TH∆Ø</span>
              </>
            )}
          </motion.button>

          <motion.button
            onClick={handleSaveArchive}
            disabled={loading || !letterContent.trim()}
            className="bg-pink-500 hover:bg-pink-600 disabled:cursor-not-allowed text-white px-8 py-3 rounded-full font-medium transition-all duration-300 flex items-center justify-center space-x-2"
            whileHover={{ scale: loading ? 1 : 1.05 }}
            whileTap={{ scale: loading ? 1 : 0.95 }}
          >
            {loading ? (
              <>
                <Loader className="animate-spin" size={20} />
                <span>ƒêANG L∆ØU...</span>
              </>
            ) : (
              <>
                <Archive size={20} />
                <span>L∆ØU TR·ªÆ</span>
              </>
            )}
          </motion.button>
        </motion.div>

        {/* Tips */}
        <motion.div
          className="mt-12 bg-gradient-to-r from-purple-500/20 to-pink-500/20 backdrop-blur-md rounded-2xl p-6 border border-white/30"
          initial={{ opacity: 0, y: 30 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.6 }}
        >
          <h3 className="text-xl font-bold text-cosmic-purple mb-4 text-center">
            üí° G·ª£i √Ω vi·∫øt th∆∞
          </h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-cosmic-purple/80 text-sm">
            <div>
              <p className="font-medium mb-2">‚ú® Chia s·∫ª c·∫£m x√∫c:</p>
              <p>H√£y th√†nh th·∫≠t v·ªÅ nh·ªØng g√¨ b·∫°n ƒëang c·∫£m th·∫•y</p>
            </div>
            <div>
              <p className="font-medium mb-2">üåü K·ªÉ c√¢u chuy·ªán:</p>
              <p>Nh·ªØng tr·∫£i nghi·ªám c·ªßa b·∫°n c√≥ th·ªÉ truy·ªÅn c·∫£m h·ª©ng cho ng∆∞·ªùi kh√°c</p>
            </div>
            <div>
              <p className="font-medium mb-2">üíù G·ª≠i l·ªùi ƒë·ªông vi√™n:</p>
              <p>Nh·ªØng l·ªùi t√≠ch c·ª±c c√≥ th·ªÉ thay ƒë·ªïi c·∫£ ng√†y c·ªßa ai ƒë√≥</p>
            </div>
            <div>
              <p className="font-medium mb-2">ü§ó Chia s·∫ª suy nghƒ©:</p>
              <p>Nh·ªØng g√≥c nh√¨n ƒë·ªôc ƒë√°o c·ªßa b·∫°n r·∫•t c√≥ gi√° tr·ªã</p>
            </div>
          </div>
        </motion.div>
      </div>
    </div>
  );
};

export default WriteLetter;